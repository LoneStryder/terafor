buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven { url = 'https://files.minecraftforge.net/maven' }
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
	}
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
//apply plugin: 'eclipse'
apply plugin: 'idea'

import net.minecraftforge.gradle.common.task.SignJar

version = mod_version
group = 'stryder.terafor' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'terafor'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
	mappings channel: mappings_channel, version: mappings_version

	runs {
		client {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			property 'forge.logging.console.level', 'debug'

			mods {
				terafor {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			property 'forge.logging.console.level', 'debug'

			mods {
				terafor {
					source sourceSets.main
				}
			}
		}

		data {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

			property 'forge.logging.console.level', 'debug'

			args '--mod', 'terafor', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

			mods {
				terafor {
					source sourceSets.main
				}
			}
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

jar {
	manifest {
		attributes([
			"Specification-Title": "${mod_name}",
			"Specification-Vendor": "${mod_vendor}",
			"Specification-Version": "1",
			"Implementation-Title": project.name,
			"Implementation-Version": "${version}",
			"Implementation-Vendor" :"${mod_vendor}",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

jar.finalizedBy('reobfJar')
//publish.dependsOn('reobfJar')

publishing {
	publications {
		gpr(MavenPublication) {
			groupId = project.group
			artifactId = project.archivesBaseName
			version = project.version
			artifact jar
		}
	}
	repositories {
		maven {
			name = 'GitHubPackages'
			url = 'https://maven.pkg.github.com/lonestryder/terafor-forge'
			credentials {
				username = project.findProperty('gpr.user')
				password = project.findProperty('gpr.key')
			}
		}
	}
}

task signJar(type: SignJar, dependsOn: jar) {
	// Skip if keyStore property is absent.
	onlyIf {
		project.hasProperty('keyStore')
	}

	keyStore = project.findProperty('keyStore')
	alias = project.findProperty('keyStoreAlias')
	storePass = project.findProperty('keyStorePass')
	keyPass = project.findProperty('keyStoreKeyPass')
	inputFile = jar.archivePath
	outputFile = jar.archivePath
}

build.dependsOn signJar
